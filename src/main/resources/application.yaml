server:
  port: 8087  # Porta na qual o serviço será executado (localhost:8087)
  servlet:
    context-path: '/ead-authuser/'  # Caminho base da aplicação; ex: localhost:8087/ead-authuser/

spring:
  application:
    name: ead-authuser-service  # Nome da aplicação registrado no Eureka (importante para descoberta de serviços)
  datasource:
    url:  jdbc:postgresql://localhost:5432/ead-authuser-v2  # URL de conexão com o banco PostgreSQL
    username: postgres   # Usuário do banco de dados
    password: 1234567  # Senha do banco de dados (em produção, use variáveis de ambiente ou Vault)
  jpa:
    hibernate:
      ddl-auto: update   # Atualiza automaticamente o schema do banco de dados conforme as entidades (útil em dev)
    show_sql: true   # Mostra as queries SQL executadas no console (bom para debug)
    properties:
      hibernate:
        jdbc:
          lob:
            non-contextual-creation: true  # Corrige um problema com LOBs (Large Objects) no Hibernate/PostgreSQL

  output:
    ansi:
      enabled: Always   # Ativa cores no log do terminal para facilitar leitura (ex: logs coloridos)

  rabbitmq:
    addresses: amqps://fgiejfrc:EeDBSevNNH-LnT-XqwTkT2IgOgOmc0Kd@leopard.lmq.cloudamqp.com/fgiejfrc
    # Endereço de conexão ao RabbitMQ hospedado na CloudAMQP (com protocolo seguro amqps)



ead:
  api:
    url:
      course: 'http://ead-course-service/ead-course'
      # URL base do microserviço de curso; usado para fazer chamadas REST entre microserviços
  broker:
    exchange:
      userEvent: ead.userevent   # Nome do "exchange" que será usado para publicar eventos relacionados ao usuário (ex: criação, atualização)


logging:
  level:
    com.ead: TRACE
    root: INFO   # Nível de log padrão para o restante do sistema
    org.springframework.web: DEBUG  # Log detalhado para requisições web do Spring (controladores, etc)
    org.hibernate: INFO   # Informações sobre execução do Hibernate

eureka:
  client:
    serviceUrl:
      defaultZone: 'http://localhost:8761/eureka'   # URL do servidor Eureka (descoberta de serviços)
  instance:
    hostname: localhost   # Nome do host onde o serviço está rodando (útil se rodar em Docker ou em rede)



#Um módulo da biblioteca Resilience4j que lida com tentativas automáticas (retries) de chamadas que falham.
resilience4j:
  retry:
    instances:
      retryInstance: # Nome da instância de retry (você pode usar em métodos específicos)
        max-attempts: 3  # Número máximo de tentativas (inclui a tentativa inicial + 2 retries)
        wait-duration: 5s   # Tempo de espera entre uma tentativa e outra (5 segundos)


